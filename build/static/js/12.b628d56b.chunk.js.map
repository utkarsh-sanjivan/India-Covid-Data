{"version":3,"sources":["components/organisms/Graph/index.js"],"names":["BarGraph","lazy","retry","DonutGraph","RangeButton","SwitchButton","Graphs","timeline","donughtLabel","donughtDailyData","donughtTotalData","useState","timelineData","setTimelineData","active","confirmed","deaths","recovered","graphData","setGraphData","useEffect","slice","map","time","active_cases_daily","confirmed_daily","death_daily","recovered_daily","className","formatDateToText","dateObj","defaultChecked","onChange","checked","suffix","disabled","labels","date","data","title","backgroundColor","onClick","range","isSelected","donughtData"],"mappings":"4LAKMA,EAAWC,gBAAK,kBAAMC,aAAM,kBAAM,2DAClCC,EAAaF,gBAAK,kBAAMC,aAAM,kBAAM,2DACpCE,EAAcH,gBAAK,kBAAMC,aAAM,kBAAM,qCACrCG,EAAeJ,gBAAK,kBAAMC,aAAM,kBAAM,mCA6G7BI,UA3GA,SAAC,GAKT,IAJLC,EAII,EAJJA,SACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,iBACAC,EACI,EADJA,iBAEA,EAAwCC,mBAAS,MAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAkCF,mBAAS,CACzCG,OAAQ,KACRC,UAAW,KACXC,OAAQ,KACRC,UAAW,OAJb,mBAAOC,EAAP,KAAkBC,EAAlB,KAOAC,qBAAU,WACRP,EAAgBN,EAASc,OAAO,OAC/B,CAACd,IAEJa,qBAAU,WACJR,GACFO,EAAa,CACXL,OAAQF,EAAaU,KAAI,SAAAC,GAAI,OAAIA,EAAKC,sBACtCT,UAAWH,EAAaU,KAAI,SAAAC,GAAI,OAAIA,EAAKE,mBACzCT,OAAQJ,EAAaU,KAAI,SAAAC,GAAI,OAAIA,EAAKG,eACtCT,UAAWL,EAAaU,KAAI,SAAAC,GAAI,OAAIA,EAAKI,uBAG5C,CAACf,IAiBJ,OAAO,qBAAKgB,UAAU,QAAf,SAEFhB,EACA,qCACC,qBAAKgB,UAAU,aAAf,mBACA,sBAAKA,UAAU,mBAAf,6BAAmDC,YAAiBjB,EAAa,GAAGkB,YACpF,sBAAKF,UAAU,0BAAf,UACE,qBAAKA,UAAU,sBAAf,mBACA,cAACvB,EAAD,CACE0B,gBAAgB,EAChBC,SAzBW,SAAAC,GACnB,IAAMC,EAASD,EAAS,SAAU,SAClCd,EAAa,CACXL,OAAQF,EAAaU,KAAI,SAAAC,GAAI,OAAIA,EAAK,eAAD,OAAgBW,OACrDnB,UAAWH,EAAaU,KAAI,SAAAC,GAAI,OAAIA,EAAK,YAAD,OAAaW,OACrDlB,OAAQJ,EAAaU,KAAI,SAAAC,GAAI,OAAIA,EAAK,QAAD,OAASW,OAC9CjB,UAAWL,EAAaU,KAAI,SAAAC,GAAI,OAAIA,EAAK,YAAD,OAAaW,UAoB/CC,UAAU,EACVP,UAAW,KAEb,qBAAKA,UAAU,sBAAf,4BAEF,cAAC5B,EAAD,CACEoC,OAAQxB,EAAaU,KAAI,SAAAC,GAAI,OAAIA,EAAKc,QACtCC,KAAMpB,EAAUH,UAChBwB,MAAM,YACNC,gBAAiB,YACjBZ,UAAW,oBAEb,cAAC5B,EAAD,CACEoC,OAAQxB,EAAaU,KAAI,SAAAC,GAAI,OAAIA,EAAKc,QACtCC,KAAMpB,EAAUJ,OAChByB,MAAM,SACNC,gBAAiB,UACjBZ,UAAW,iBAEb,cAAC5B,EAAD,CACEoC,OAAQxB,EAAaU,KAAI,SAAAC,GAAI,OAAIA,EAAKc,QACtCC,KAAMpB,EAAUD,UAChBsB,MAAM,YACNC,gBAAiB,UACjBZ,UAAW,oBAEb,cAAC5B,EAAD,CACEoC,OAAQxB,EAAaU,KAAI,SAAAC,GAAI,OAAIA,EAAKc,QACtCC,KAAMpB,EAAUF,OAChBuB,MAAM,SACNC,gBAAiB,UACjBZ,UAAW,gBAEb,cAACxB,EAAD,CACEqC,QAlDkB,SAAAC,GACnBA,GAAO7B,EAAgBN,GAC5BM,EAAgBN,EAASc,OAAO,EAAEqB,KAiD5BC,WAAY,IAEd,cAACxC,EAAD,CACEoC,MAAO,mBACP/B,aAAcA,EACdoC,YAAanC,IAEf,cAACN,EAAD,CACEoC,MAAO,mBACP/B,aAAcA,EACdoC,YAAalC,OAtDF","file":"static/js/12.b628d56b.chunk.js","sourcesContent":["import { lazy, useState, useEffect } from 'react';\nimport './index.scss';\n\nimport { retry, formatDateToText } from '../../../utils/commonFunctions';\n\nconst BarGraph = lazy(() => retry(() => import('../../molecules/BarGraph')));\nconst DonutGraph = lazy(() => retry(() => import('../../molecules/DonutGraph')));\nconst RangeButton = lazy(() => retry(() => import('../../molecules/RangeButtons')));\nconst SwitchButton = lazy(() => retry(() => import('../../atoms/SwitchButton')));\n\nconst Graphs = ({\n  timeline,\n  donughtLabel,\n  donughtDailyData,\n  donughtTotalData\n}) => {\n  const [timelineData, setTimelineData] = useState(null);\n  const [graphData, setGraphData] = useState({\n    active: null,\n    confirmed: null,\n    deaths: null,\n    recovered: null\n  });\n  \n  useEffect(() => {\n    setTimelineData(timeline.slice(-30));\n  }, [timeline]);\n\n  useEffect(() => {\n    if (timelineData) {\n      setGraphData({\n        active: timelineData.map(time => time.active_cases_daily),\n        confirmed: timelineData.map(time => time.confirmed_daily),\n        deaths: timelineData.map(time => time.death_daily),\n        recovered: timelineData.map(time => time.recovered_daily)\n      });\n    }\n  }, [timelineData])\n\n  const handleChange = checked => {\n    const suffix = checked? '_total': '_daily';\n    setGraphData({\n      active: timelineData.map(time => time[`active_cases${suffix}`]),\n      confirmed: timelineData.map(time => time[`confirmed${suffix}`]),\n      deaths: timelineData.map(time => time[`death${suffix}`]),\n      recovered: timelineData.map(time => time[`recovered${suffix}`])\n    });\n  }\n\n  const handleRangeChange = range => {\n    if (!range) setTimelineData(timeline);\n    setTimelineData(timeline.slice(-1*range));\n  }\n\n  return <div className=\"Graph\">\n    {\n      !timelineData? <div>Loading...</div>\n      :<>\n        <div className=\"india-text\">India</div>\n        <div className=\"last-update-text\">Last Updated on {formatDateToText(timelineData[0].dateObj)}</div>\n        <div className=\"toogle-button-container\">\n          <div className=\"toggle-button-label\">Daily</div>\n          <SwitchButton \n            defaultChecked={false}\n            onChange={handleChange}\n            disabled={false}\n            className={''}\n            />\n          <div className=\"toggle-button-label\">Commulative</div>\n        </div>\n        <BarGraph\n          labels={timelineData.map(time => time.date)}\n          data={graphData.confirmed}\n          title=\"Confirmed\"\n          backgroundColor={'#ff073a99'}\n          className={'confirmed-graph'}\n        />\n        <BarGraph\n          labels={timelineData.map(time => time.date)}\n          data={graphData.active}\n          title=\"Active\"\n          backgroundColor={'#007bff'}\n          className={'active-graph'}\n        />\n        <BarGraph\n          labels={timelineData.map(time => time.date)}\n          data={graphData.recovered}\n          title=\"Recovered\"\n          backgroundColor={'#28a745'}\n          className={'recovered-graph'}\n        />\n        <BarGraph\n          labels={timelineData.map(time => time.date)}\n          data={graphData.deaths}\n          title=\"Deaths\"\n          backgroundColor={'#6c757d'}\n          className={'death-graph'}\n        />\n        <RangeButton \n          onClick={handleRangeChange}\n          isSelected={0}\n        />\n        <DonutGraph\n          title={'Daily Comparison'}\n          donughtLabel={donughtLabel}\n          donughtData={donughtDailyData}\n        />\n        <DonutGraph\n          title={'Total Comparison'}\n          donughtLabel={donughtLabel}\n          donughtData={donughtTotalData}\n        />\n      </>\n    }\n  </div>\n}\n\nexport default Graphs;\n"],"sourceRoot":""}