{"version":3,"sources":["utils/commonFunctions.js","index.js"],"names":["numberFormatter","Intl","NumberFormat","maximumFractionDigits","retry","fn","retriesLeft","interval","Promise","resolve","reject","then","catch","error","setTimeout","formatDateToText","date","dateObj","Date","second","format","minute","hour","amPm","day","month","year","getYear","toString","slice","abbreviateNumber","number","numberCleaned","Math","round","abs","floor","formatNumber","value","option","isNaN","App","lazy","ReactDOM","render","fallback","basename","document","getElementById"],"mappings":"iHAAA,wKASMA,GATN,MASwB,IAAIC,KAAKC,aAAa,QAAS,CAAEC,sBAAuB,KAEnEC,EAAQ,SAARA,EAASC,GAA0C,IAAtCC,EAAqC,uDAAvB,EAAGC,EAAoB,uDAAT,IACpD,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BL,IACGM,KAAKF,GACLG,OAAM,SAACC,GACNC,YAAW,WACW,IAAhBR,EAMJF,EAAMC,EAAIC,EAAc,EAAGC,GAAUI,KAAKF,EAASC,GALjDA,EAAOG,KAMRN,UAqBEQ,EAAmB,SAAAC,GAC9B,IAAMC,EAAUD,EAAM,IAAIE,KAAKF,GAAO,IAAIE,KACpCC,EAASC,YAAOH,EAAS,KAAK,EAArB,WAA4BG,YAAOH,EAAS,MAAQG,YAAOH,EAAS,KAC7EI,EAASD,YAAOH,EAAS,KAAK,EAArB,WAA4BG,YAAOH,EAAS,MAAQG,YAAOH,EAAS,KAC7EK,EAAOF,YAAOH,EAAS,KAAK,EAArB,WAA4BG,YAAOH,EAAS,MAAQG,YAAOH,EAAS,KAC3EM,EAAOH,YAAOH,EAAS,KACvBO,EAAMJ,YAAOH,EAAS,MACtBQ,EAAQL,YAAOH,EAAS,QACxBS,EAAOC,YAAQV,GAASW,WAAWC,OAAO,GAChD,MAAM,GAAN,OAAUL,EAAV,YAAiBC,EAAjB,YAA0BC,EAA1B,aAAmCJ,EAAnC,YAA2CD,EAA3C,YAAqDF,EAArD,YAA+DI,IAGpDO,EAAmB,SAACC,GAC/B,IAAMC,EAAgBC,KAAKC,MAAMD,KAAKE,IAAIJ,IAC1C,OAAIC,EAAgB,IAAYhC,EAAgBoB,OAAOa,KAAKG,MAAML,IACzDC,GAAiB,KAAOA,EAAgB,IACxChC,EAAgBoB,OAAOW,EAAS,KAAO,IACvCC,GAAiB,KAAOA,EAAgB,IACxChC,EAAgBoB,OAAOW,EAAS,KAAO,IACvCC,GAAiB,KAAOA,EAAgB,KACxChC,EAAgBoB,OAAOW,EAAS,KAAO,KACvCC,GAAiB,MAAQA,EAAgB,KACzChC,EAAgBoB,OAAOW,EAAS,MAAQ,OACxCC,GAAiB,KACjBhC,EAAgBoB,OAAOW,EAAS,MAAQ,YAD5C,GAIMM,EAAe,SAACC,GAAwB,IAAjBC,EAAgB,uDAAP,GAC3C,OAAIC,MAAMF,GACD,IACa,SAAXC,EACFvC,EAAgBoB,OACrBa,KAAKE,IAAIG,GAAS,EAAIA,EAAQL,KAAKC,MAAMI,IAEvB,UAAXC,EACFT,EAAiBQ,GACJ,MAAXC,EACH,GAAN,OAAUvC,EAAgBoB,OAAOkB,GAAjC,KACoB,KAAXC,EACFvC,EAAgBoB,OAAOkB,QADzB,I,gCCnFT,mEAMMG,EAAMC,gBAAK,kBAAMtC,aAAM,kBAAM,mCAEnCuC,IAASC,OACP,cAAC,WAAD,CAAUC,SAAU,wBAApB,SACE,cAAC,IAAD,CAAeC,SAAS,oBAAxB,SACE,cAAC,aAAD,UACE,cAACL,EAAD,UAINM,SAASC,eAAe,U","file":"static/js/main.d6fff7b0.chunk.js","sourcesContent":["import {\n  getYear,\n  format,\n  formatISO,\n  subDays,\n  parseISO\n} from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\n\nconst numberFormatter = new Intl.NumberFormat('en-IN', { maximumFractionDigits: 1 });\n\nexport const retry = (fn, retriesLeft = 5, interval = 1000) => {\n  return new Promise((resolve, reject) => {\n    fn()\n      .then(resolve)\n      .catch((error) => {\n        setTimeout(() => {\n          if (retriesLeft === 1) {\n            reject(error);\n            return;\n          }\n\n          // Passing on \"reject\" is the important part\n          retry(fn, retriesLeft - 1, interval).then(resolve, reject);\n        }, interval);\n      });\n  });\n}\n\nexport const getIndiaDate = () => {\n  return utcToZonedTime(new Date(), 'Asia/Kolkata');\n};\n\nexport const getIndiaDateISO = () => {\n  return formatISO(getIndiaDate(), {representation: 'date'});\n};\n\nexport const getIndiaDateYesterday = () => {\n  return subDays(getIndiaDate(), 1);\n};\n\nexport const getIndiaDateYesterdayISO = () => {\n  return formatISO(getIndiaDateYesterday(), {representation: 'date'});\n};\n\nexport const formatDateToText = date => {\n  const dateObj = date? new Date(date): new Date();\n  const second = format(dateObj, 's')<9? `0${format(dateObj, 's')}`: format(dateObj, 's');\n  const minute = format(dateObj, 'm')<9? `0${format(dateObj, 'm')}`: format(dateObj, 'm');\n  const hour = format(dateObj, 'h')<9? `0${format(dateObj, 'h')}`: format(dateObj, 'h');\n  const amPm = format(dateObj, 'a');\n  const day = format(dateObj, 'dd');\n  const month = format(dateObj, 'LLLL');\n  const year = getYear(dateObj).toString().slice(-2);\n  return `${day} ${month} ${year}, ${hour}:${minute}:${second} ${amPm}`;\n}\n\nexport const abbreviateNumber = (number) => {\n  const numberCleaned = Math.round(Math.abs(number));\n  if (numberCleaned < 1e3) return numberFormatter.format(Math.floor(number));\n  else if (numberCleaned >= 1e3 && numberCleaned < 1e5)\n    return numberFormatter.format(number / 1e3) + 'K';\n  else if (numberCleaned >= 1e5 && numberCleaned < 1e7)\n    return numberFormatter.format(number / 1e5) + 'L';\n  else if (numberCleaned >= 1e7 && numberCleaned < 1e10)\n    return numberFormatter.format(number / 1e7) + 'Cr';\n  else if (numberCleaned >= 1e10 && numberCleaned < 1e14)\n    return numberFormatter.format(number / 1e10) + 'K Cr';\n  else if (numberCleaned >= 1e14)\n    return numberFormatter.format(number / 1e14) + 'L Cr';\n};\n\nexport const formatNumber = (value, option = '') => {\n  if (isNaN(value)) {\n    return '-';\n  } else if (option === 'long') {\n    return numberFormatter.format(\n      Math.abs(value) < 1 ? value : Math.round(value)\n    );\n  } else if (option === 'short') {\n    return abbreviateNumber(value);\n  } else if (option === '%') {\n    return `${numberFormatter.format(value)}%`;\n  } else if (option === '') {\n    return numberFormatter.format(value);\n  }\n};\n","import { Suspense, lazy, StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { retry } from './utils/commonFunctions';\nimport './index.scss';\n\nconst App = lazy(() => retry(() => import('./App')));\n\nReactDOM.render(\n  <Suspense fallback={<div />}>\n    <BrowserRouter basename=\"/India-Covid-Data\">\n      <StrictMode>\n        <App />\n      </StrictMode>\n    </BrowserRouter>\n  </Suspense>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}