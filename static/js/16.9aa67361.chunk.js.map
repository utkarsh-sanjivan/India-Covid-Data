{"version":3,"sources":["components/molecules/IndiaMap/index.js"],"names":["LinearGradient","lazy","retry","SwitchButton","INDIA_TOPO_JSON","require","PROJECTION_CONFIG","scale","center","geographyStyle","default","outline","hover","fill","transition","cursor","pressed","IndiaMap","mapData","mapColorArray","handleIsDailySwitch","useState","tooltipContent","setTooltipContent","data","setData","useEffect","gradientData","fromColor","toColor","length","min","reduce","item","value","max","colorScale","scaleQuantile","domain","map","d","range","onMouseEnter","geo","current","properties","name","onMouseLeave","className","style","display","defaultChecked","onChange","disabled","projectionConfig","projection","width","height","geography","geographies","find","s","id","rsmKey"],"mappings":"wLAOMA,EAAiBC,gBAAK,kBAAMC,aAAM,kBAAM,qCACxCC,EAAeF,gBAAK,kBAAMC,aAAM,kBAAM,mCAEtCE,EAAkBC,EAAQ,KAE1BC,EAAoB,CACtBC,MAAO,KACPC,OAAQ,CAAC,KAAM,OAKbC,EAAiB,CACnBC,QAAS,CACLC,QAAS,QAEbC,MAAO,CACHC,KAAM,OACNC,WAAY,YACZH,QAAS,OACTI,OAAQ,WAEZC,QAAS,CACLL,QAAS,SAgFFM,UA5EE,SAAC,GAIX,IAHHC,EAGE,EAHFA,QACAC,EAEE,EAFFA,cACAC,EACE,EADFA,oBAEA,EAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAwBF,mBAASH,GAAjC,mBAAOM,EAAP,KAAaC,EAAb,KAEAC,qBAAU,WACND,EAAQP,KACT,CAACA,IAEJ,IAAMS,EAAe,CACjBC,UAAWT,EAAc,GACzBU,QAASV,EAAcA,EAAcW,OAAS,GAC9CC,IAAKb,EAAQc,QAAO,SAACD,EAAKE,GAAN,OAAgBA,EAAKC,MAAQH,EAAME,EAAKC,MAAQH,IAAMb,EAAQ,GAAGgB,OACrFC,IAAKjB,EAAQc,QAAO,SAACG,EAAKF,GAAN,OAAgBA,EAAKC,MAAQC,EAAMF,EAAKC,MAAQC,IAAM,IAGxEC,EAAaC,cACdC,OAAOpB,EAAQqB,KAAI,SAAAC,GAAC,OAAIA,EAAEN,UAC1BO,MAAMtB,GAELuB,EAAe,SAACC,GAAoC,IAA/BC,EAA8B,uDAApB,CAAEV,MAAO,MAC1C,OAAO,WACPX,EAAkB,GAAD,OAAIoB,EAAIE,WAAWC,KAAnB,aAA4BF,EAAQV,UAInDa,EAAe,WACjBxB,EAAkB,KAGtB,OACI,sBAAKyB,UAAU,8BAAf,UACI,sBAAKC,MAAO,CAAEC,QAAS,QAAvB,UACI,qBAAKF,UAAU,sBAAf,mBACA,cAAC7C,EAAD,CACIgD,gBAAgB,EAChBC,SAAUhC,EACViC,UAAU,EACVL,UAAW,oBAEf,qBAAKA,UAAU,sBAAf,sBAEJ,cAAC,IAAD,UAAe1B,IACf,cAAC,gBAAD,CACIgC,iBAAkBhD,EAClBiD,WAAW,cACXC,MAAO,IACPC,OAAQ,IACR,WAAS,GALb,SAOA,cAAC,cAAD,CAAaC,UAAWtD,EAAxB,SACK,qBAAGuD,YACYpB,KAAI,SAAAI,GACZ,IAAMC,EAAUpB,EAAKoC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOnB,EAAImB,MAC5C,OACA,cAAC,YAAD,CAEIJ,UAAWf,EACX9B,KAAM+B,EAAUR,EAAWQ,EAAQV,OA9EzC,OA+EMe,MAAOxC,EACPiC,aAAcA,EAAaC,EAAKC,GAChCG,aAAcA,GALTJ,EAAIoB,gBAYzB,cAAC/D,EAAD,CAAgBwB,KAAMG,S","file":"static/js/16.9aa67361.chunk.js","sourcesContent":["import React, { useEffect, useState, lazy } from 'react';\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\nimport { scaleQuantile } from 'd3-scale';\nimport ReactTooltip from 'react-tooltip';\n\nimport { retry } from '../../../utils/commonFunctions';\n\nconst LinearGradient = lazy(() => retry(() => import('../../atoms/LinearGradient')));\nconst SwitchButton = lazy(() => retry(() => import('../../atoms/SwitchButton')));\n\nconst INDIA_TOPO_JSON = require('./india.topo.json');\n\nconst PROJECTION_CONFIG = {\n    scale: 1180,\n    center: [82.8, 21.7]\n};\n\nconst DEFAULT_COLOR = '#EEE';\n\nconst geographyStyle = {\n    default: {\n        outline: 'none'\n    },\n    hover: {\n        fill: '#ccc',\n        transition: 'all 250ms',\n        outline: 'none',\n        cursor: 'pointer'\n    },\n    pressed: {\n        outline: 'none'\n    }\n};\n\nconst IndiaMap = ({\n    mapData,\n    mapColorArray,\n    handleIsDailySwitch\n}) => {\n    const [tooltipContent, setTooltipContent] = useState('');\n    const [data, setData] = useState(mapData);\n    \n    useEffect(() => {\n        setData(mapData);\n    }, [mapData])\n\n    const gradientData = {\n        fromColor: mapColorArray[0],\n        toColor: mapColorArray[mapColorArray.length - 1],\n        min: mapData.reduce((min, item) => (item.value < min ? item.value : min), mapData[0].value),\n        max: mapData.reduce((max, item) => (item.value > max ? item.value : max), 0)\n    }\n\n    const colorScale = scaleQuantile()\n        .domain(mapData.map(d => d.value))\n        .range(mapColorArray);    \n\n    const onMouseEnter = (geo, current = { value: 'NA' }) => {\n        return () => {\n        setTooltipContent(`${geo.properties.name}: ${current.value}`);\n        };\n    };\n\n    const onMouseLeave = () => {\n        setTooltipContent('');\n    };\n\n    return (\n        <div className=\"full-width-height container\">\n            <div style={{ display: 'flex' }}>\n                <div className=\"toggle-button-label\">Daily</div>\n                <SwitchButton \n                    defaultChecked={false}\n                    onChange={handleIsDailySwitch}\n                    disabled={false}\n                    className={'line-bar-switch'}\n                />\n                <div className=\"toggle-button-label\">Total</div>\n            </div>\n            <ReactTooltip>{tooltipContent}</ReactTooltip>\n            <ComposableMap\n                projectionConfig={PROJECTION_CONFIG}\n                projection=\"geoMercator\"\n                width={600}\n                height={650}\n                data-tip=\"\"\n            >\n            <Geographies geography={INDIA_TOPO_JSON}>\n                {({ geographies }) =>\n                    geographies.map(geo => {\n                        const current = data.find(s => s.id === geo.id);\n                        return (\n                        <Geography\n                            key={geo.rsmKey}\n                            geography={geo}\n                            fill={current ? colorScale(current.value) : DEFAULT_COLOR}\n                            style={geographyStyle}\n                            onMouseEnter={onMouseEnter(geo, current)}\n                            onMouseLeave={onMouseLeave}\n                        />\n                        );\n                    })\n                }\n            </Geographies>\n            </ComposableMap>\n            <LinearGradient data={gradientData} />\n        </div>\n    );\n}\n\nexport default IndiaMap;"],"sourceRoot":""}