{"version":3,"sources":["api/index.js","components/pages/Homepage/index.js"],"names":["getTodayCovidData","a","axios","get","states_data","india_data","data","splice","responseObj","confirmed_total","new_positive","confirmed_daily","positive","active_cases_total","new_active","active_cases_daily","active","recovered_total","new_cured","recovered_daily","cured","death_total","new_death","death_daily","death","states","forEach","state","push","state_name","state_code","sort","firstEl","secondEl","parseInt","getTotalCovidData","alldata","timeline","reverse","map","time","index","date","dateObj","updated_at","confirmed","new_confirmed","recovered","new_recovered","deaths","new_deaths","code","name","population","updatedAt","Banner","lazy","retry","Graph","MapSwitcher","Table","TableLoader","pieStatisticObject","Homepage","useState","setData","className","setClassName","allData","setAllData","currentStatistic","setCurrentStatistic","pieLabel","setPieLabel","pieDailyData","setPieDailyData","pieTotalData","setPieTotalData","useEffect","then","fallback","handleMapSwitch","statistics"],"mappings":"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","file":"static/js/13.ddbe4069.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport async function getTodayCovidData() {\n  const states_data =  await axios.get('https://www.mohfw.gov.in/data/datanew.json');\n  const india_data = states_data.data.splice(-1)[0];\n  const responseObj = {\n    confirmed_total: india_data.new_positive,\n    confirmed_daily: india_data.new_positive-india_data.positive,\n    active_cases_total: india_data.new_active,\n    active_cases_daily: india_data.new_active - india_data.active,\n    recovered_total: india_data.new_cured,\n    recovered_daily: india_data.new_cured - india_data.cured,\n    death_total: india_data.new_death,\n    death_daily: india_data.new_death - india_data.death,\n    states: []\n  }\n  states_data.data.forEach(state => {\n    responseObj.states.push({\n      state_name: state.state_name,\n      state_code: state.state_code,\n      confirmed_total: state.new_positive,\n      confirmed_daily: state.new_positive - state.positive,\n      active_cases_total: state.new_active,\n      active_cases_daily: state.new_active - state.active,\n      recovered_total: state.new_cured,\n      recovered_daily: state.new_cured - state.cured,\n      death_total: state.new_death,\n      death_daily: state.new_death - state.death\n    });\n  });\n\n  responseObj.states.sort((firstEl, secondEl) => {\n    if(parseInt(firstEl['confirmed_total']) < parseInt(secondEl['confirmed_total'])) return 1;\n    if(parseInt(firstEl['confirmed_total']) > parseInt(secondEl['confirmed_total'])) return -1;\n    return 0;\n  });\n\n  return responseObj;\n}\n\nexport async function getTotalCovidData() {\n  const alldata =  await axios.get('https://corona-api.com/countries/IN');\n  const responseObj = alldata.data.data;\n  const timeline = responseObj.timeline.reverse().map((time, index) => {\n    const active_cases_daily = index>0? time.active - responseObj.timeline[index-1].active :time.active;\n    return {\n      date: time.date,\n      dateObj: time.updated_at,\n      confirmed_total: time.confirmed,\n      confirmed_daily: time.new_confirmed,\n      active_cases_total: time.active,\n      active_cases_daily,\n      recovered_total: time.recovered,\n      recovered_daily: time.new_recovered,\n      death_total: time.deaths,\n      death_daily: time.new_deaths\n    }\n  });\n  return {\n    code: responseObj.code,\n    name: responseObj.name,\n    population: responseObj.population,\n    timeline,\n    updatedAt: responseObj.updated_at\n  };\n}\n","import React, { lazy, useEffect, useState, Suspense } from 'react';\n\nimport { getTodayCovidData, getTotalCovidData } from '../../../api';\nimport { retry } from '../../../utils/commonFunctions';\nimport './index.scss';\n\nconst Banner = lazy(() => retry(() => import('../../molecules/Banner')));\nconst Graph = lazy(() => retry(() => import('../../organisms/Graph')));\nconst MapSwitcher = lazy(() => retry(() => import('../../organisms/MapSwitcher')));\nconst Table = lazy(() => retry(() => import('../../organisms/Table')));\nconst TableLoader = lazy(() => retry(() => import('../../molecules/TableLoader')));\n\nconst pieStatisticObject = {\n  'active_cases': 'Active Cases',\n  'recovered': 'Recovered',\n  'death': 'Death',\n  'confirmed': 'Confirmed'\n}\n\nfunction Homepage() {\n  const [data, setData] = useState(null);\n  const [className, setClassName] = useState('confirmed-banner');\n  const [allData, setAllData] = useState(null);\n  const [currentStatistic, setCurrentStatistic] = useState('Confirmed');\n  const [pieLabel, setPieLabel] = useState([]);\n  const [pieDailyData, setPieDailyData] = useState([]);\n  const [pieTotalData, setPieTotalData] = useState([]);\n\n  useEffect(() => {\n    retry(getTodayCovidData).then(data => {\n      setPieLabel(data.states.map(state => state.state_name));\n      setPieDailyData(data.states.map(state => parseInt(state.confirmed_daily)));\n      setPieTotalData(data.states.map(state => parseInt(state.confirmed_total)));\n      setData(data);\n    });\n    retry(getTotalCovidData).then(setAllData);\n  }, []);\n\n  const handleMapSwitch = statistics => {\n    setClassName(`${statistics}-banner`);\n    setCurrentStatistic(pieStatisticObject[statistics]);\n    setPieDailyData(data.states.map(state => parseInt(state[`${statistics}_daily`])));\n    setPieTotalData(data.states.map(state => parseInt(state[`${statistics}_total`])));\n  }\n\n  return <div className='Homepage'>\n    <Banner className={className}/>\n    {data && (\n      <Suspense fallback={<TableLoader />}>\n        <div className='homepage-left-pane'>\n          <MapSwitcher data={data} handleMapSwitch={handleMapSwitch}/>\n          <Table\n            {...{data}}\n            updatedAt={allData? allData.updatedAt: null}\n          />\n        </div>\n        <div className='homepage-right-pane'>\n          <Graph \n            timeline={allData? allData.timeline: []}\n            updatedAt={allData? allData.updatedAt: null}\n            currentStatistic={currentStatistic}\n            pieLabel={pieLabel}\n            pieDailyData={pieDailyData}\n            pieTotalData={pieTotalData}\n          />\n        </div>\n      </Suspense>\n    )}\n  </div>\n}\n\nexport default Homepage;\n"],"sourceRoot":""}