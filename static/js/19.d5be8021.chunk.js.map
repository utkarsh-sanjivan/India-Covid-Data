{"version":3,"sources":["components/molecules/BarGraph/index.js"],"names":["SwitchButton","lazy","retry","ChartJS","register","CategoryScale","LinearScale","BarElement","LineController","LineElement","PointElement","Title","Tooltip","Legend","BarGraph","data","label","title","labels","backgroundColor","className","useState","isBar","setIsBar","options","responsive","plugins","legend","position","display","text","type","scales","x","y","mapData","datasets","fill","lineTension","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","option","defaultChecked","onChange","disabled"],"mappings":"8KAiBMA,EAAeC,gBAAK,kBAAMC,aAAM,kBAAM,mCAE5CC,IAAQC,SACNC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,KAsGaC,UAnGE,SAAC,GAMX,IALLC,EAKI,EALJA,KACOC,EAIH,EAJJC,MACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,UAEA,EAA4BC,oBAAS,GAArC,mBAAQC,EAAR,KAAeC,EAAf,KAEMC,EAAUF,EAAO,CACrBG,YAAY,EACZC,QAAS,CACPC,OAAQ,CACNC,SAAU,OAEZX,MAAO,CACLY,SAAS,EACTC,KAAMd,KAGT,CACDe,KAAM,OACNP,QAAS,CACPE,QAAS,CACPT,MAAO,CACLY,SAAS,EACTC,KAAMd,IAGVgB,OAAQ,CACNC,EAAG,CACDF,KAAM,UAERG,EAAG,CACDH,KAAM,aAMRI,EAAUb,EAAO,CACrBJ,SACAkB,SAAU,CAAC,CACTpB,QACAD,OACAI,qBAED,CACDD,SACAkB,SAAU,CACR,CACEpB,QACAqB,MAAM,EACNC,YAAa,GACbnB,kBACAoB,YAAapB,EACbqB,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkBzB,EAClB0B,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B7B,EAC3B8B,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBrC,UAKN,OAAO,sBAAKK,UAAU,2BAAf,UACJE,EACC,cAAC,IAAD,CACEF,UAAS,oBAAeA,GACxBI,QAASA,EACTT,KAAMoB,IAEN,cAAC,IAAD,CACAf,UAAS,oBAAeA,GACxBL,KAAMoB,EACNkB,OAAQ7B,IAEZ,sBAAKJ,UAAW,kBAAhB,UACE,qBAAKA,UAAU,sBAAf,kBACA,cAACpB,EAAD,CACEsD,gBAAgB,EAChBC,SAAU,kBAAMhC,GAAUD,IAC1BkC,UAAU,EACVpC,UAAW,oBAEb,qBAAKA,UAAU,sBAAf","file":"static/js/19.d5be8021.chunk.js","sourcesContent":["import React, { lazy, useState } from 'react';\nimport { Bar, Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  LineController,\n  LineElement,\n  PointElement\n} from 'chart.js';\n\nimport { retry } from '../../../utils/commonFunctions';\n\nconst SwitchButton = lazy(() => retry(() => import('../../atoms/SwitchButton')));\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  LineController,\n  LineElement,\n  PointElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst BarGraph = ({\n  data,\n  title: label,\n  labels,\n  backgroundColor,\n  className\n}) => {\n  const [ isBar, setIsBar ] = useState(false);\n\n  const options = isBar? {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: label,\n      },\n    },\n  }: {\n    type: 'line',\n    options: {\n      plugins: {\n        title: {\n          display: true,\n          text: label\n        }\n      },\n      scales: {\n        x: {\n          type: 'linear'\n        },\n        y: {\n          type: 'linear'\n        }\n      }\n    }\n  };\n  \n  const mapData = isBar? {\n    labels,\n    datasets: [{\n      label,\n      data,\n      backgroundColor,\n    }],\n  }: { \n    labels,\n    datasets: [\n      {\n        label,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor,\n        borderColor: backgroundColor,\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: backgroundColor,\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: backgroundColor,\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data\n      }\n    ]\n  };\n\n  return <div className='line-bar-graph-container'>\n    {isBar?\n      <Bar\n        className={`bar-graph ${className}`}\n        options={options}\n        data={mapData}\n      />\n      : <Line\n        className={`bar-graph ${className}`}\n        data={mapData}\n        option={options}\n      />}\n    <div className={'line-bar-switch'}>\n      <div className=\"toggle-button-label\">Line</div>\n      <SwitchButton \n        defaultChecked={false}\n        onChange={() => setIsBar(!isBar)}\n        disabled={false}\n        className={'line-bar-switch'}\n      />\n      <div className=\"toggle-button-label\">Bar</div>\n    </div>\n  </div>;\n}\n\nexport default BarGraph;"],"sourceRoot":""}