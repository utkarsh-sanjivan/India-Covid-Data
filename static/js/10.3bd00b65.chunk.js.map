{"version":3,"sources":["api/index.js","components/pages/Homepage/index.js","constant/color.js"],"names":["getTodayCovidData","a","axios","get","states_data","india_data","data","splice","responseObj","confirmed_total","new_positive","confirmed_daily","positive","active_cases_total","new_active","active_cases_daily","active","recovered_total","new_cured","recovered_daily","cured","death_total","new_death","death_daily","death","states","forEach","state","push","id","mapStateId","state_name","state_code","sort","firstEl","secondEl","parseInt","getTotalCovidData","alldata","timeline","reverse","map","time","index","date","dateObj","updated_at","confirmed","new_confirmed","recovered","new_recovered","deaths","new_deaths","code","name","population","updatedAt","Banner","lazy","retry","Graph","MapSwitcher","Table","TableLoader","Homepage","useState","setData","className","setClassName","allData","setAllData","currentStatistics","setCurrentStatistics","mapData","setMapData","mapColors","mapColorArray","setMapColorArray","isDaily","setIsDaily","useEffect","then","value","fallback","handleMapSwitch","statistics","handleIsDailySwitch","newIsDaily","chartColors","active_cases"],"mappings":"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,GAAIF,MAAOA,EAAMI,WAAYmD,MAAO9C,SAAST,EAAMhB,sBAC5GuD,EAAQ5D,MAEVqD,YAAMtB,GAAmB4C,KAAKX,KAC7B,IAiCI,sBAAKH,UAAU,WAAf,UACL,cAACV,EAAD,CAAQU,UAAWA,IAClB7D,GACC,eAAC,WAAD,CAAU6E,SAAU,cAACpB,EAAD,IAApB,UACE,sBAAKI,UAAU,qBAAf,UACE,cAACN,EAAD,CAAavD,KAAMA,EAAM8E,gBApCT,SAAAC,GACtBjB,EAAa,GAAD,OAAIiB,EAAJ,YACZb,EAAqBa,GAIrBR,EAAiBF,IAAUU,IAC3BX,EACEpE,EAAKmB,OAAOgB,KAAI,SAAAd,GACd,MAAO,CACLE,GAAIF,EAAME,GACVF,MAAOA,EAAMI,WACbmD,MAAO9C,SAAST,EAAc,GAAD,OAAK0D,EAAZP,EAAO,6BAyB7B,cAAChB,EAAD,CACOxD,OACLkD,UAAWa,EAASA,EAAQb,UAAW,UAG3C,qBAAKW,UAAU,sBAAf,SACE,cAACP,EAAD,CACErB,SAAU8B,EAASA,EAAQ9B,SAAU,GACrCiB,UAAWa,EAASA,EAAQb,UAAW,KAKvCiB,QAASA,EACTG,cAAeA,EACfU,oBAlCkB,SAAAC,GAC1BR,EAAWQ,GACXb,EACEpE,EAAKmB,OAAOgB,KAAI,SAAAd,GACd,MAAO,CACLE,GAAIF,EAAME,GACVF,MAAOA,EAAMI,WACbmD,MAAO9C,SAAST,EAAiB,GAAD,OAAK4C,EAAfgB,EAAU,uC,gCC/D1C,oEAAO,IAAMC,EAAc,CACzB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGWb,EAAY,CACvBc,aAAc,CACZ,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,WAEFxC,UAAW,CACT,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,WAEFzB,MAAO,CACL,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,WAEFuB,UAAW,CACT,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA","file":"static/js/10.3bd00b65.chunk.js","sourcesContent":["import axios from 'axios';\nimport { mapStateId } from '../utils/commonFunctions';\n\nexport async function getTodayCovidData() {\n  const states_data =  await axios.get('https://www.mohfw.gov.in/data/datanew.json');\n  const india_data = states_data.data.splice(-1)[0];\n  const responseObj = {\n    confirmed_total: india_data.new_positive,\n    confirmed_daily: india_data.new_positive-india_data.positive,\n    active_cases_total: india_data.new_active,\n    active_cases_daily: india_data.new_active - india_data.active,\n    recovered_total: india_data.new_cured,\n    recovered_daily: india_data.new_cured - india_data.cured,\n    death_total: india_data.new_death,\n    death_daily: india_data.new_death - india_data.death,\n    states: []\n  }\n  states_data.data.forEach(state => {\n    responseObj.states.push({\n      id: mapStateId(state),\n      state_name: state.state_name,\n      state_code: state.state_code,\n      confirmed_total: state.new_positive,\n      confirmed_daily: state.new_positive - state.positive,\n      active_cases_total: state.new_active,\n      active_cases_daily: state.new_active - state.active,\n      recovered_total: state.new_cured,\n      recovered_daily: state.new_cured - state.cured,\n      death_total: state.new_death,\n      death_daily: state.new_death - state.death\n    });\n    if (state.state_name === 'Dadra and Nagar Haveli and Daman and Diu') {\n      responseObj.states.push({\n        id: 'DD',\n        state_name: state.state_name,\n        state_code: state.state_code,\n        confirmed_total: state.new_positive,\n        confirmed_daily: state.new_positive - state.positive,\n        active_cases_total: state.new_active,\n        active_cases_daily: state.new_active - state.active,\n        recovered_total: state.new_cured,\n        recovered_daily: state.new_cured - state.cured,\n        death_total: state.new_death,\n        death_daily: state.new_death - state.death\n      });\n    }\n  });\n\n  responseObj.states.sort((firstEl, secondEl) => {\n    if(parseInt(firstEl['confirmed_total']) < parseInt(secondEl['confirmed_total'])) return 1;\n    if(parseInt(firstEl['confirmed_total']) > parseInt(secondEl['confirmed_total'])) return -1;\n    return 0;\n  });\n\n  return responseObj;\n}\n\nexport async function getTotalCovidData() {\n  const alldata =  await axios.get('https://corona-api.com/countries/IN');\n  const responseObj = alldata.data.data;\n  const timeline = responseObj.timeline.reverse().map((time, index) => {\n    const active_cases_daily = index>0? time.active - responseObj.timeline[index-1].active :time.active;\n    return {\n      date: time.date,\n      dateObj: time.updated_at,\n      confirmed_total: time.confirmed,\n      confirmed_daily: time.new_confirmed,\n      active_cases_total: time.active,\n      active_cases_daily,\n      recovered_total: time.recovered,\n      recovered_daily: time.new_recovered,\n      death_total: time.deaths,\n      death_daily: time.new_deaths\n    }\n  });\n  return {\n    code: responseObj.code,\n    name: responseObj.name,\n    population: responseObj.population,\n    timeline,\n    updatedAt: responseObj.updated_at\n  };\n}\n","import React, { lazy, useEffect, useState, Suspense } from 'react';\n\nimport { getTodayCovidData, getTotalCovidData } from '../../../api';\nimport { retry } from '../../../utils/commonFunctions';\nimport { mapColors } from '../../../constant/color';\n// import { pieStatisticObject }  from '../../../constant';\nimport './index.scss';\n\nconst Banner = lazy(() => retry(() => import('../../molecules/Banner')));\nconst Graph = lazy(() => retry(() => import('../../organisms/Graph')));\nconst MapSwitcher = lazy(() => retry(() => import('../../organisms/MapSwitcher')));\nconst Table = lazy(() => retry(() => import('../../organisms/Table')));\nconst TableLoader = lazy(() => retry(() => import('../../molecules/TableLoader')));\n\nfunction Homepage() {\n  const [data, setData] = useState(null);\n  const [className, setClassName] = useState('confirmed-banner');\n  const [allData, setAllData] = useState(null);\n  const [currentStatistics, setCurrentStatistics] = useState('confirmed');\n  // const [currentStatistic, setCurrentStatistic] = useState('Confirmed');\n  // const [pieLabel, setPieLabel] = useState([]);\n  // const [pieDailyData, setPieDailyData] = useState([]);\n  // const [pieTotalData, setPieTotalData] = useState([]);\n  const [mapData, setMapData] = useState([]);\n  const [mapColorArray, setMapColorArray] = useState(mapColors.confirmed)\n  const [isDaily, setIsDaily] = useState(true);\n\n  useEffect(() => {\n    retry(getTodayCovidData).then(data => {\n      // setPieLabel(data.states.map(state => state.state_name));\n      // setPieDailyData(data.states.map(state => parseInt(state.confirmed_daily)));\n      // setPieTotalData(data.states.map(state => parseInt(state.confirmed_total)));\n      setMapData(data.states.map(state => { return { id: state.id, state: state.state_name, value: parseInt(state.confirmed_daily) } }));\n      setData(data);\n    });\n    retry(getTotalCovidData).then(setAllData);\n  }, []);\n\n  const handleMapSwitch = statistics => {\n    setClassName(`${statistics}-banner`);\n    setCurrentStatistics(statistics);\n    // setCurrentStatistic(pieStatisticObject[statistics]);\n    // setPieDailyData(data.states.map(state => parseInt(state[`${statistics}_daily`])));\n    // setPieTotalData(data.states.map(state => parseInt(state[`${statistics}_total`])));\n    setMapColorArray(mapColors[statistics]);\n    setMapData(\n      data.states.map(state => {\n        return {\n          id: state.id,\n          state: state.state_name,\n          value: parseInt(state[isDaily? `${statistics}_total`: `${statistics}_daily`])\n        } \n      })\n    );\n  }\n\n  const handleIsDailySwitch = newIsDaily => {\n    setIsDaily(newIsDaily);\n    setMapData(\n      data.states.map(state => {\n        return {\n          id: state.id,\n          state: state.state_name,\n          value: parseInt(state[newIsDaily? `${currentStatistics}_total`: `${currentStatistics}_daily`])\n        } \n      })\n    );\n  }\n\n  return <div className='Homepage'>\n    <Banner className={className}/>\n    {data && (\n      <Suspense fallback={<TableLoader />}>\n        <div className='homepage-left-pane'>\n          <MapSwitcher data={data} handleMapSwitch={handleMapSwitch}/>\n          <Table\n            {...{data}}\n            updatedAt={allData? allData.updatedAt: null}\n          />\n        </div>\n        <div className='homepage-right-pane'>\n          <Graph \n            timeline={allData? allData.timeline: []}\n            updatedAt={allData? allData.updatedAt: null}\n            // currentStatistic={currentStatistic}\n            // pieLabel={pieLabel}\n            // pieDailyData={pieDailyData}\n            // pieTotalData={pieTotalData}\n            mapData={mapData}\n            mapColorArray={mapColorArray}\n            handleIsDailySwitch={handleIsDailySwitch}\n          />\n        </div>\n      </Suspense>\n    )}\n  </div>\n}\n\nexport default Homepage;\n","export const chartColors = [\n  \"#336699\",\n  \"#99CCFF\",\n  \"#999933\",\n  \"#666699\",\n  \"#CC9933\",\n  \"#006666\",\n  \"#3399FF\",\n  \"#993300\",\n  \"#CCCC99\",\n  \"#666666\",\n  \"#FFCC66\",\n  \"#6699CC\",\n  \"#663366\",\n  \"#9999CC\",\n  \"#CCCCCC\",\n  \"#669999\",\n  \"#CCCC66\",\n  \"#CC6600\",\n  \"#9999FF\",\n  \"#0066CC\",\n  \"#99CCCC\",\n  \"#999999\",\n  \"#FFCC00\",\n  \"#009999\",\n  \"#99CC33\",\n  \"#FF9900\",\n  \"#999966\",\n  \"#66CCCC\",\n  \"#339966\",\n  \"#CCCC33\",\n  \"#003f5c\",\n  \"#665191\",\n  \"#a05195\",\n  \"#d45087\",\n  \"#2f4b7c\",\n  \"#f95d6a\",\n  \"#ff7c43\",\n  \"#ffa600\",\n  \"#EF6F6C\",\n  \"#465775\",\n  \"#56E39F\",\n  \"#59C9A5\",\n  \"#5B6C5D\",\n  \"#0A2342\",\n  \"#2CA58D\",\n  \"#84BC9C\",\n  \"#CBA328\",\n  \"#F46197\",\n  \"#DBCFB0\",\n  \"#545775\"\n];\n\nexport const mapColors = {\n  active_cases: [\n    '#007bff10', \n    '#007bff20',\n    '#007bff30',\n    '#007bff40',\n    '#007bff50',\n    '#007bff60',\n    '#007bff70',\n    '#007bff80',\n    '#007bff90',\n    '#007bff'\n  ],\n  recovered: [\n    '#28a74510',\n    '#28a74520',\n    '#28a74530',\n    '#28a74540',\n    '#28a74550',\n    '#28a74560',\n    '#28a74570',\n    '#28a74580',\n    '#28a74590',\n    '#28a745'\n  ],\n  death: [\n    '#6c757d10',\n    '#6c757d20',\n    '#6c757d30',\n    '#6c757d40',\n    '#6c757d50',\n    '#6c757d60',\n    '#6c757d70',\n    '#6c757d80',\n    '#6c757d90',\n    '#6c757d'\n  ],\n  confirmed: [\n    '#dc354510',\n    '#dc354520',\n    '#dc354530',\n    '#dc354540',\n    '#dc354550',\n    '#dc354560',\n    '#dc354570',\n    '#dc354580',\n    '#dc354590',\n    '#dc3545'\n  ]\n}\n"],"sourceRoot":""}